package burp;


import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;
import org.json.JSONTokener;

import javax.imageio.ImageIO;
import javax.swing.*;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.InputEvent;
import java.awt.event.ItemEvent;
import java.awt.image.BufferedImage;
import java.io.*;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.regex.PatternSyntaxException;

public class OptionsPanel extends javax.swing.JPanel implements TableModelListener
{
    Issue currentIssue;
    static byte[] EMPTY_MESSAGE = new byte[]{};
    ReplicatorPanel replicatorPanel;
    List<String> hosts = new ArrayList<>();

    /**
     * Creates new form NewJPanel
     */
    public OptionsPanel(ReplicatorPanel replicatorPanel) {
        this.replicatorPanel = replicatorPanel;
        initComponents();
        loadMacros();
        setCurrentIssue(null);
        jTableHosts.getModel().addTableModelListener(this);
        jComboBoxLoginMacro.addActionListener(new ActionListener()
        {
            @Override
            public void actionPerformed(ActionEvent e)
            {
                jButtonLogin.setEnabled(getLoginMacro() != null);
            }
        });

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jComboBox1 = new javax.swing.JComboBox<>();
        buttonGroup1 = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        jComboBoxLoginMacro = new javax.swing.JComboBox<>();
        jButtonLogin = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jButtonLoad = new javax.swing.JButton();
        jButtonSave = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jNotes = new javax.swing.JTextArea();
        jLabelFile = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jScrollPaneHosts = new javax.swing.JScrollPane();
        jTableHosts = new javax.swing.JTable();
        jLabelLogo = new javax.swing.JLabel();
        jPanelIssue = new javax.swing.JPanel();
        jTextFieldSessionRules = new javax.swing.JTextField();
        jButtonTest = new javax.swing.JButton();
        jButtonDelete = new javax.swing.JButton();
        jButtonClearStatus = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jNotes1 = new javax.swing.JTextArea();
        jLabelGrep = new javax.swing.JLabel();
        jTextFieldGrepExpression = new javax.swing.JTextField();
        jButtonUseExpression = new javax.swing.JButton();
        jButtonScrub = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jRadioButtonGrep = new javax.swing.JRadioButton();
        jLabel6 = new javax.swing.JLabel();
        jRadioButtonCollaborator = new javax.swing.JRadioButton();
        jLabelCollaborator = new javax.swing.JLabel();
        jTextFieldCollaboratorReplace = new javax.swing.JTextField();
        jLabelCollaboratorTimeout = new javax.swing.JLabel();
        jTextFieldCollaboratorTimeout = new javax.swing.JTextField();
        jButtonConfig = new javax.swing.JButton();
        jButtonTestAll = new javax.swing.JButton();
        jButtonCookieJar = new javax.swing.JButton();
        jButtonTrace = new javax.swing.JButton();

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel1.setText("Login macro");

        jComboBoxLoginMacro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxLoginMacroActionPerformed(evt);
            }
        });

        jButtonLogin.setText("Login");
        jButtonLogin.setEnabled(false);
        jButtonLogin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonLoginActionPerformed(evt);
            }
        });

        jLabel2.setText("Replicator file");

        jButtonLoad.setText("Load");
        jButtonLoad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonLoadActionPerformed(evt);
            }
        });

        jButtonSave.setText("Save");
        jButtonSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSaveActionPerformed(evt);
            }
        });

        jLabel3.setText("Tester notes");

        jNotes.setColumns(20);
        jNotes.setRows(5);
        jScrollPane1.setViewportView(jNotes);

        jLabel4.setText("Hosts");

        jTableHosts.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Host"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jTableHosts.setSurrendersFocusOnKeystroke(true);
        jTableHosts.setTableHeader(null);
        jScrollPaneHosts.setViewportView(jTableHosts);

        jLabelLogo.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabelLogo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabelLogoMouseClicked(evt);
            }
        });

        jTextFieldSessionRules.setEditable(false);

        jButtonTest.setText("Test");
        jButtonTest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonTestActionPerformed(evt);
            }
        });

        jButtonDelete.setText("Delete");
        jButtonDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDeleteActionPerformed(evt);
            }
        });

        jButtonClearStatus.setText("Clear status");
        jButtonClearStatus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonClearStatusActionPerformed(evt);
            }
        });

        jLabel8.setText("Detection mode");

        jNotes1.setColumns(20);
        jNotes1.setRows(2);
        jScrollPane2.setViewportView(jNotes1);

        jLabelGrep.setText("Grep expression");

        jTextFieldGrepExpression.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextFieldGrepExpressionFocusLost(evt);
            }
        });

        jButtonUseExpression.setText("Use selection");
        jButtonUseExpression.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonUseExpressionActionPerformed(evt);
            }
        });

        jButtonScrub.setText("Scrub cookies...");
        jButtonScrub.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonScrubActionPerformed(evt);
            }
        });

        jLabel5.setText("Session rules");

        buttonGroup1.add(jRadioButtonGrep);
        jRadioButtonGrep.setSelected(true);
        jRadioButtonGrep.setText("Grep expression");
        jRadioButtonGrep.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonGrepItemStateChanged(evt);
            }
        });

        jLabel6.setText("Issue notes");

        buttonGroup1.add(jRadioButtonCollaborator);
        jRadioButtonCollaborator.setText("Collaborator");
        jRadioButtonCollaborator.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonCollaboratorItemStateChanged(evt);
            }
        });

        jLabelCollaborator.setText("Collab. replace");

        jLabelCollaboratorTimeout.setText("Timeout");

        jTextFieldCollaboratorTimeout.setHorizontalAlignment(javax.swing.JTextField.RIGHT);

        jButtonConfig.setText("Config...");
        jButtonConfig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonConfigActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelIssueLayout = new javax.swing.GroupLayout(jPanelIssue);
        jPanelIssue.setLayout(jPanelIssueLayout);
        jPanelIssueLayout.setHorizontalGroup(
            jPanelIssueLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelIssueLayout.createSequentialGroup()
                .addGroup(jPanelIssueLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelIssueLayout.createSequentialGroup()
                        .addGroup(jPanelIssueLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel8)
                            .addComponent(jLabel6))
                        .addGroup(jPanelIssueLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanelIssueLayout.createSequentialGroup()
                                .addGap(24, 24, 24)
                                .addComponent(jRadioButtonGrep)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jRadioButtonCollaborator)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(jPanelIssueLayout.createSequentialGroup()
                                .addGap(20, 20, 20)
                                .addComponent(jScrollPane2))))
                    .addGroup(jPanelIssueLayout.createSequentialGroup()
                        .addGroup(jPanelIssueLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanelIssueLayout.createSequentialGroup()
                                .addGroup(jPanelIssueLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabelGrep)
                                    .addComponent(jLabel5)
                                    .addComponent(jLabelCollaborator))
                                .addGap(18, 18, 18)
                                .addGroup(jPanelIssueLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jTextFieldSessionRules, javax.swing.GroupLayout.PREFERRED_SIZE, 318, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanelIssueLayout.createSequentialGroup()
                                        .addGroup(jPanelIssueLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addComponent(jTextFieldCollaboratorReplace, javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jTextFieldGrepExpression, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 184, Short.MAX_VALUE))
                                        .addGroup(jPanelIssueLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addGroup(jPanelIssueLayout.createSequentialGroup()
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jButtonUseExpression))
                                            .addGroup(jPanelIssueLayout.createSequentialGroup()
                                                .addGap(22, 22, 22)
                                                .addComponent(jLabelCollaboratorTimeout)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(jTextFieldCollaboratorTimeout))))))
                            .addGroup(jPanelIssueLayout.createSequentialGroup()
                                .addComponent(jButtonTest)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButtonClearStatus)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButtonDelete)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButtonScrub)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButtonConfig)))
                        .addGap(0, 19, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanelIssueLayout.setVerticalGroup(
            jPanelIssueLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelIssueLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelIssueLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelIssueLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(jRadioButtonGrep)
                    .addComponent(jRadioButtonCollaborator))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelIssueLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelGrep)
                    .addComponent(jTextFieldGrepExpression, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonUseExpression))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelIssueLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelCollaborator)
                    .addComponent(jTextFieldCollaboratorReplace, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelCollaboratorTimeout)
                    .addComponent(jTextFieldCollaboratorTimeout, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelIssueLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldSessionRules, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelIssueLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonTest)
                    .addComponent(jButtonClearStatus)
                    .addComponent(jButtonScrub)
                    .addComponent(jButtonDelete)
                    .addComponent(jButtonConfig))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jButtonTestAll.setText("Test all");
        jButtonTestAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonTestAllActionPerformed(evt);
            }
        });

        jButtonCookieJar.setText("Cookie jar...");
        jButtonCookieJar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCookieJarActionPerformed(evt);
            }
        });

        jButtonTrace.setText("Start trace");
        jButtonTrace.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonTraceActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanelIssue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel1)
                                .addComponent(jLabel4))
                            .addGap(42, 42, 42)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jComboBoxLoginMacro, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jButtonLogin)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jButtonCookieJar)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jButtonTrace))
                                .addComponent(jScrollPaneHosts, javax.swing.GroupLayout.PREFERRED_SIZE, 468, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel3)
                                .addComponent(jLabel2))
                            .addGap(33, 33, 33)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(jButtonLoad)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(jButtonSave)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(jButtonTestAll))
                                        .addGroup(layout.createSequentialGroup()
                                            .addGap(6, 6, 6)
                                            .addComponent(jLabelFile, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jLabelLogo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addComponent(jScrollPane1))))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabelLogo, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButtonLoad)
                            .addComponent(jButtonSave)
                            .addComponent(jLabel2)
                            .addComponent(jButtonTestAll))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabelFile, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(jScrollPaneHosts, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jComboBoxLoginMacro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonLogin)
                    .addComponent(jButtonCookieJar)
                    .addComponent(jButtonTrace))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanelIssue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonLoadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonLoadActionPerformed
        JFileChooser fc = new JFileChooser();
        String lastFile = BurpExtender.callbacks.loadExtensionSetting("lastFile");
        if(lastFile != null)
        {
            fc.setSelectedFile(new File(lastFile));
        }
        if(fc.showOpenDialog(this) != JFileChooser.APPROVE_OPTION)
        {
            return;
        }
        try
        {
            replicatorPanel.currentFile = fc.getSelectedFile();
            InputStream inputStream = new FileInputStream(replicatorPanel.currentFile);
            byte[] data = new byte[(int) replicatorPanel.currentFile.length()];
            inputStream.read(data);
            inputStream.close();
            JSONObject json = new JSONObject(new JSONTokener(new String(data)));
            JsonMarshaller jsonMarshaller = new JsonMarshaller();
            jsonMarshaller.unmarshall(json, replicatorPanel);
            if(!replicatorPanel.issueTableModel.issues.isEmpty())
            {
                replicatorPanel.issueTable.setRowSelectionInterval(0, 0);
            }
            jLabelFile.setText(replicatorPanel.currentFile.getName());
            loadMacros();
            addAllHosts();
            replicatorPanel.loggedIn = false;
            BurpExtender.callbacks.saveExtensionSetting("lastFile", replicatorPanel.currentFile.toString());
            if(replicatorPanel.config != null && !replicatorPanel.config.isEmpty())
            {
                int confirm = JOptionPane.showConfirmDialog(this, "The Replicator file includes configuration. Do you want to update your Burp project with the configuration?", BurpExtender.name, JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
                if(confirm == JOptionPane.YES_OPTION)
                {
                    BurpExtender.callbacks.loadConfigFromJson(replicatorPanel.config);
                }
            }
            if(!jsonMarshaller.warnings.isEmpty())
            {
                // TBD: show warnings
            }
        }
        catch(Exception ex)
        {
            ex.printStackTrace(new PrintStream(BurpExtender.callbacks.getStderr()));
            String message = ex.toString();
            if(ex instanceof JSONException)
            {
                message = "This is not a Replicator file.";
            }
            JOptionPane.showMessageDialog(this, message, BurpExtender.name, JOptionPane.ERROR_MESSAGE);
            return;
        }
    }//GEN-LAST:event_jButtonLoadActionPerformed

    private void jButtonSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSaveActionPerformed
        setCurrentIssue(currentIssue);
        if(replicatorPanel.currentFile == null || (evt.getModifiers() & InputEvent.SHIFT_MASK) != 0)
        {
            JFileChooser fc = new JFileChooser();
            if (fc.showSaveDialog(this) != JFileChooser.APPROVE_OPTION)
            {
                return;
            }
            if (fc.getSelectedFile().isFile())
            {
                int confirm = JOptionPane.showConfirmDialog(this, "Do you want to overwrite this file?", BurpExtender.name, JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);
                if (confirm == JOptionPane.NO_OPTION)
                {
                    return;
                }
            }
            replicatorPanel.currentFile = fc.getSelectedFile();
            jLabelFile.setText(replicatorPanel.currentFile.getName());
            BurpExtender.callbacks.saveExtensionSetting("lastFile", replicatorPanel.currentFile.toString());
        }
        try
        {
            JsonMarshaller jsonMarshaller = new JsonMarshaller();
            JSONObject json = jsonMarshaller.marshall(replicatorPanel);
            OutputStream outputStream = new FileOutputStream(replicatorPanel.currentFile);
            outputStream.write(json.toString(4).getBytes());
            outputStream.close();
        }
        catch(Exception ex)
        {
            ex.printStackTrace(new PrintStream(BurpExtender.callbacks.getStderr()));
            JOptionPane.showMessageDialog(this, ex.toString(), BurpExtender.name, JOptionPane.ERROR_MESSAGE);
            return;
        }

    }//GEN-LAST:event_jButtonSaveActionPerformed

    private void jComboBoxLoginMacroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxLoginMacroActionPerformed
        try
        {
            String macroName = getLoginMacro();
            if(macroName == null)
            {
                return;
            }
            MacrosMarshaller.Macro macro = new MacrosMarshaller().getMacroByName(macroName);
            if(macro == null)
            {
                return;
            }
            JSONObject loginSessionRule = SessionRulesMarshaller.genereateLoginSessionRule(macro.getSerial(), macro.getURL());
            new SessionRulesMarshaller().setProjectSessionRule(loginSessionRule);
        }
        catch(Exception ex)
        {
            ex.printStackTrace(new PrintStream(BurpExtender.callbacks.getStderr()));
            JOptionPane.showMessageDialog(this, ex.toString(), BurpExtender.name, JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jComboBoxLoginMacroActionPerformed

    private void jButtonLoginActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonLoginActionPerformed
        try
        {
            MacrosMarshaller.Macro macro = new MacrosMarshaller().getMacroByName(getLoginMacro());
            new Thread(new MacroRunner(macro, replicatorPanel)).start();
            replicatorPanel.loggedIn = true;
        }
        catch(Exception ex)
        {
            ex.printStackTrace(new PrintStream(BurpExtender.callbacks.getStderr()));
            JOptionPane.showMessageDialog(this, ex.toString(), BurpExtender.name, JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButtonLoginActionPerformed

    private void jLabelLogoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabelLogoMouseClicked
        if(replicatorPanel.viewType != BurpExtender.TESTER_VIEW)
        {
            return;
        }
        JFileChooser fc = new JFileChooser();
        fc.setFileFilter(new FileNameExtensionFilter("PNG Images", "png"));
        fc.setDialogTitle("Select a logo");
        if(fc.showOpenDialog(this) != JFileChooser.APPROVE_OPTION)
        {
            return;
        }
        try
        {
            setLogo(new FileInputStream(fc.getSelectedFile()));
            BurpExtender.callbacks.saveExtensionSetting("logo", fc.getSelectedFile().toString());
        }
        catch(Exception ex)
        {
            ex.printStackTrace(new PrintStream(BurpExtender.callbacks.getStderr()));
            JOptionPane.showMessageDialog(this, ex.toString(), BurpExtender.name, JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jLabelLogoMouseClicked

    private void jButtonScrubActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonScrubActionPerformed
        JDialog dialog = new CookieSelector(BurpExtender.getBurpFrame(), replicatorPanel);
        dialog.setLocationRelativeTo(replicatorPanel);
        dialog.setVisible(true);
    }//GEN-LAST:event_jButtonScrubActionPerformed

    private void jButtonUseExpressionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonUseExpressionActionPerformed
        if(jRadioButtonGrep.isSelected())
        {
            byte[] selectedData = replicatorPanel.responseEditor.getSelectedData();
            if(selectedData == null)
            {
                return;
            }
            currentIssue.grepExpression = BurpExtender.escapeRegex(new String(selectedData));
            jTextFieldGrepExpression.setText(currentIssue.grepExpression);
        }
        if(jRadioButtonCollaborator.isSelected())
        {
            byte[] selectedData = replicatorPanel.requestEditor.getSelectedData();
            if(selectedData == null)
            {
                return;
            }
            currentIssue.collaboratorReplace = BurpExtender.escapeRegex(new String(selectedData));
            jTextFieldCollaboratorReplace.setText(currentIssue.collaboratorReplace);
        }
    }//GEN-LAST:event_jButtonUseExpressionActionPerformed

    private void jTextFieldGrepExpressionFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFieldGrepExpressionFocusLost
        try
        {
            String regex = jTextFieldGrepExpression.getText();
            Pattern.compile(regex);
            currentIssue.grepExpression = regex;
        }
        catch(PatternSyntaxException ex)
        {
            JOptionPane.showMessageDialog(replicatorPanel, ex.toString(), BurpExtender.name, JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jTextFieldGrepExpressionFocusLost

    private void jButtonClearStatusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonClearStatusActionPerformed
        for(Issue issue : replicatorPanel.issueTableModel.getSelectedIssues())
        {
            issue.clearStatus();
        }
    }//GEN-LAST:event_jButtonClearStatusActionPerformed

    private void jButtonTestAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonTestAllActionPerformed
        testIssues(replicatorPanel.issueTableModel.issues);
    }//GEN-LAST:event_jButtonTestAllActionPerformed

    private void jButtonDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDeleteActionPerformed
        String thisIssue = replicatorPanel.issueTable.getSelectedRows().length == 1 ? "this issue" : "these issues";
        int confirm = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete " + thisIssue + "?", BurpExtender.name, JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);
        if(confirm == JOptionPane.YES_OPTION)
        {
            replicatorPanel.issueTableModel.deleteIssues(replicatorPanel.issueTable.getSelectedRows());
        }
        replicatorPanel.optionsPanel.addAllHosts();
    }//GEN-LAST:event_jButtonDeleteActionPerformed

    private void jButtonTestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonTestActionPerformed
        setCurrentIssue(currentIssue); // save fields
        List<Issue> selectedIssues = new ArrayList<>();
        for(int row : replicatorPanel.issueTable.getSelectedRows())
        {
            selectedIssues.add(replicatorPanel.issueTableModel.getIssue(row));
        }
        testIssues(selectedIssues);
    }//GEN-LAST:event_jButtonTestActionPerformed

    private void jButtonCookieJarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCookieJarActionPerformed
        JDialog dialog = new CookieJar(BurpExtender.getBurpFrame(), replicatorPanel);
        dialog.setLocationRelativeTo(replicatorPanel);
        dialog.setVisible(true);
    }//GEN-LAST:event_jButtonCookieJarActionPerformed

    private void jButtonConfigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonConfigActionPerformed
        JDialog dialog = new ConfigDialog(BurpExtender.getBurpFrame(), replicatorPanel);
        dialog.setLocationRelativeTo(replicatorPanel);
        dialog.setVisible(true);
    }//GEN-LAST:event_jButtonConfigActionPerformed

    private void jRadioButtonGrepItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonGrepItemStateChanged
        enableGrepDetection(evt.getStateChange() == ItemEvent.SELECTED);
    }//GEN-LAST:event_jRadioButtonGrepItemStateChanged

    private void jRadioButtonCollaboratorItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonCollaboratorItemStateChanged
        enableCollaboratorDetection(evt.getStateChange() == ItemEvent.SELECTED);
    }//GEN-LAST:event_jRadioButtonCollaboratorItemStateChanged

    private void jButtonTraceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonTraceActionPerformed
        if(replicatorPanel.trace != null)
        {
            JFileChooser fc = new JFileChooser();
            fc.setDialogTitle("Save the trace file");
            int confirm = fc.showOpenDialog(this);
            List<TraceItem> trace = replicatorPanel.trace;
            replicatorPanel.trace = null;
            jButtonTrace.setText("Start tracing");
            if(confirm != JFileChooser.APPROVE_OPTION)
            {
                return;
            }
            if (fc.getSelectedFile().isFile())
            {
                confirm = JOptionPane.showConfirmDialog(this, "Do you want to overwrite this file?", BurpExtender.name, JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);
                if (confirm == JOptionPane.NO_OPTION)
                {
                    return;
                }
            }
            try
            {
                JSONArray json = new JSONArray();
                for(TraceItem traceItem : trace)
                {
                    json.put(traceItem.marshall());
                }
                OutputStream outputStream = new FileOutputStream(fc.getSelectedFile());
                outputStream.write(json.toString(4).getBytes());
                outputStream.close();
            }
            catch(Exception ex)
            {
                ex.printStackTrace(new PrintStream(BurpExtender.callbacks.getStderr()));
                JOptionPane.showMessageDialog(this, ex.toString(), BurpExtender.name, JOptionPane.ERROR_MESSAGE);
            }
        }
        else
        {
            int confirm = JOptionPane.showConfirmDialog(replicatorPanel, "Tracing consumes significant memory and should only be used to diagnose issues. Do you want to start tracing?", BurpExtender.name, JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
            if(confirm == JOptionPane.YES_OPTION)
            {
                replicatorPanel.trace = new ArrayList<>();
                jButtonTrace.setText("Stop tracing");
            }
        }

    }//GEN-LAST:event_jButtonTraceActionPerformed

    void enableGrepDetection(boolean enable)
    {
        jLabelGrep.setEnabled(enable);
        jTextFieldGrepExpression.setEnabled(enable);
    }

    void enableCollaboratorDetection(boolean enable)
    {
        jLabelCollaborator.setEnabled(enable);
        jTextFieldCollaboratorReplace.setEnabled(enable);
        jLabelCollaboratorTimeout.setEnabled(enable);
        jTextFieldCollaboratorTimeout.setEnabled(enable);
    }

    void setLogo(InputStream logoStream) throws IOException
    {
        BufferedImage logo;
        logo = ImageIO.read(logoStream);

        Dimension dim = jLabelLogo.getSize();
        double logoAspect = ((double) logo.getWidth()) / logo.getHeight();
        double labelAspect = ((double) dim.width) / dim.height;
        int width, height;
        if(logoAspect > labelAspect)
        {
            width = dim.width;
            height = (int) Math.round(dim.width / logoAspect);
        }
        else
        {
            height = dim.height;
            width = (int) Math.round(dim.height * logoAspect);
        }

        replicatorPanel.logo = resizeImage(logo, width, height);
        jLabelLogo.setIcon(new ImageIcon(replicatorPanel.logo));
    }

    private static BufferedImage resizeImage(BufferedImage originalImage, int width, int height)
    {
        int type = originalImage.getType() == 0 ? BufferedImage.TYPE_INT_ARGB : originalImage.getType();
        BufferedImage resizedImage = new BufferedImage(width, height, type);
        Graphics2D g = resizedImage.createGraphics();
        g.drawImage(originalImage.getScaledInstance(width, height, Image.SCALE_SMOOTH), 0, 0, width, height, null);
        g.dispose();
        return resizedImage;
    }


    String loginMacro;

    void loadMacros()
    {
        String prevLoginMacro = loginMacro;
        jComboBoxLoginMacro.removeAllItems();
        jComboBoxLoginMacro.addItem(" ");
        try
        {
            for(String macro : new MacrosMarshaller().getMacroNames())
            {
                jComboBoxLoginMacro.addItem(macro);
            }
            setLoginMacro(prevLoginMacro);
        }
        catch(Exception ex)
        {
            ex.printStackTrace(new PrintStream(BurpExtender.callbacks.getStderr()));
        }
    }

    String getLoginMacro()
    {
        loginMacro = (String) jComboBoxLoginMacro.getSelectedItem();
        return loginMacro == null ? null : loginMacro.equals(" ") ? null : loginMacro;
    }

    void setLoginMacro(String loginMacro)
    {
        this.loginMacro = loginMacro;
        for(int i = 0; i < jComboBoxLoginMacro.getItemCount(); i++)
        {
            if(jComboBoxLoginMacro.getItemAt(i).equals(loginMacro))
            {
                jComboBoxLoginMacro.setSelectedIndex(i);
                break;
            }
        }
    }

    void setViewType(byte viewType)
    {
        if(viewType == BurpExtender.DEVELOPER_VIEW)
        {
            jNotes.setEditable(false);
            jComboBoxLoginMacro.setEnabled(false);
            if(replicatorPanel.logo == null)
            {
                jLabelLogo.setIcon(null);
            }
        }
        else
        {
            jNotes.setEditable(true);
            jComboBoxLoginMacro.setEnabled(true);
            try
            {
                if(replicatorPanel.logo == null)
                {
                    String logo = BurpExtender.callbacks.loadExtensionSetting("logo");
                    if(logo != null)
                    {
                        setLogo(new FileInputStream(logo));
                    }
                    else
                    {
                        setLogo(getClass().getResourceAsStream("your-logo-here.png"));
                        replicatorPanel.logo = null;
                    }
                }
            }
            catch (IOException e)
            {
                e.printStackTrace(new PrintWriter(BurpExtender.callbacks.getStderr()));
            }
        }

        if(viewType == BurpExtender.DEVELOPER_VIEW)
        {
            jButtonClearStatus.setVisible(false);
            jNotes.setEditable(false);
            jButtonDelete.setVisible(false);
            jButtonUseExpression.setVisible(false);
            jButtonScrub.setVisible(false);
            jButtonConfig.setVisible(false);
            jTextFieldGrepExpression.setEditable(false);
            jTextFieldCollaboratorReplace.setEditable(false);
            jTextFieldCollaboratorTimeout.setEditable(false);
            jRadioButtonGrep.setEnabled(false);
            jRadioButtonCollaborator.setEnabled(false);
        }
        else
        {
            jButtonClearStatus.setVisible(true);
            jNotes.setEditable(true);
            jButtonDelete.setVisible(true);
            jButtonUseExpression.setVisible(true);
            jButtonScrub.setVisible(true);
            jButtonConfig.setVisible(true);
            jTextFieldGrepExpression.setEditable(true);
            jTextFieldCollaboratorReplace.setEditable(true);
            jTextFieldCollaboratorTimeout.setEditable(true);
            if(currentIssue != null)
            {
                jRadioButtonGrep.setEnabled(true);
                jRadioButtonCollaborator.setEnabled(true);
            }
        }
    }

    void addAllHosts()
    {
        DefaultTableModel model = (DefaultTableModel) jTableHosts.getModel();
        while(model.getRowCount() > 0)
        {
            model.removeRow(0);
        }
        hosts.clear();

        for(Issue issue : replicatorPanel.issueTableModel.issues)
        {
            addHost(issue.getHost());
        }
    }

    void addHost(String host)
    {
        if(hosts.contains(host))
        {
            return;
        }
        hosts.add(host);
        DefaultTableModel model = (DefaultTableModel) jTableHosts.getModel();
        model.addRow(new String[]{host});
        model.fireTableDataChanged();
    }

    void setCurrentIssue(Issue issue)
    {
        // save previous issue
        if(currentIssue != null)
        {
            currentIssue.detectionMethod = jRadioButtonGrep.isSelected() ? Issue.DETECTION_GREP : Issue.DETECTION_COLLABORATOR;
            currentIssue.grepExpression = jTextFieldGrepExpression.getText();
            currentIssue.collaboratorReplace = jTextFieldCollaboratorReplace.getText();
            try
            {
                currentIssue.collaboratorTimeout = Integer.parseInt(jTextFieldCollaboratorTimeout.getText()); // TBD: catch
            }
            catch(NumberFormatException ex)
            {
                currentIssue.collaboratorTimeout = Issue.DEFAULT_COLLABORATOR_TIMEOUT;
            }
            currentIssue.notes = jNotes1.getText();
            currentIssue.request = replicatorPanel.requestEditor.getMessage();
        }

        currentIssue = issue;
        if(issue == null)
        {
            setIssueEnabled(false);
            // The if clause avoids NPE at startup
            if(replicatorPanel.requestEditor != null)
            {
                replicatorPanel.requestEditor.setMessage(EMPTY_MESSAGE, true);
                replicatorPanel.responseEditor.setMessage(EMPTY_MESSAGE, false);
            }
        }
        else
        {
            setIssueEnabled(true);
            if(currentIssue != null)
            {
                jRadioButtonGrep.setSelected(issue.detectionMethod == Issue.DETECTION_GREP);
                enableGrepDetection(issue.detectionMethod == Issue.DETECTION_GREP);
                jRadioButtonCollaborator.setSelected(issue.detectionMethod == Issue.DETECTION_COLLABORATOR);
                enableCollaboratorDetection(issue.detectionMethod == Issue.DETECTION_COLLABORATOR);
            }
            jTextFieldGrepExpression.setText(issue.grepExpression);
            jTextFieldCollaboratorReplace.setText(issue.collaboratorReplace);
            jTextFieldCollaboratorTimeout.setText(Integer.toString(issue.collaboratorTimeout));
            jNotes1.setText(currentIssue.notes);
            jTextFieldSessionRules.setText(issue.getSessionRules());
            replicatorPanel.requestEditor.setMessage(issue.request == null ? EMPTY_MESSAGE : issue.request, true);
            replicatorPanel.responseEditor.setMessage(issue.response == null ? EMPTY_MESSAGE : issue.response, false);
        }
    }

    void testIssues(java.util.List<Issue> issues)
    {
        if(replicatorPanel.burpExtender.issueChecker != null)
        {
            int confirm = JOptionPane.showConfirmDialog(this, "A scan is already running. Starting a new scan will cancel the running scan.", BurpExtender.name, JOptionPane.OK_CANCEL_OPTION, JOptionPane.WARNING_MESSAGE);
            if (confirm == JOptionPane.CANCEL_OPTION)
            {
                return;
            }
            replicatorPanel.burpExtender.issueChecker.terminating = true;
        }
        replicatorPanel.burpExtender.issueChecker = new IssueChecker(issues, replicatorPanel);
        new Thread(replicatorPanel.burpExtender.issueChecker).start();
    }

    public void setIssueEnabled(boolean enabled)
    {
        for(Component component : jPanelIssue.getComponents())
        {
            component.setEnabled(enabled);
        }
    }

    @Override
    public void tableChanged(TableModelEvent e)
    {
        if (e.getType() != TableModelEvent.UPDATE)
        {
            return;
        }

        String newValue = (String) jTableHosts.getModel().getValueAt(e.getFirstRow(), 0);
        String oldValue = hosts.get(e.getFirstRow());
        if (newValue.equals(oldValue))
        {
            return;
        }

        Pattern pattern = Pattern.compile("^(.*):(\\d+)$");
        Matcher matcher = pattern.matcher(oldValue);
        matcher.find();
        String oldHost = matcher.group(1);
        int oldPort = Integer.parseInt(matcher.group(2));

        matcher = pattern.matcher(newValue);
        if (!matcher.matches())
        {
            JOptionPane.showMessageDialog(BurpExtender.getBurpFrame(), "The host must take the form hostname:port", BurpExtender.name, JOptionPane.WARNING_MESSAGE);
            jTableHosts.getModel().setValueAt(oldValue, e.getFirstRow(), 0);
            return;
        }
        String newHost = matcher.group(1);
        int newPort = Integer.parseInt(matcher.group(2));

        int confirm = JOptionPane.showConfirmDialog(BurpExtender.getBurpFrame(), "Do you want to change the target for all matching requests and macros?", BurpExtender.name, JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        if (confirm != JOptionPane.YES_OPTION)
        {
            jTableHosts.getModel().setValueAt(oldValue, e.getFirstRow(), 0);
            return;
        }

        for (Issue issue : replicatorPanel.issueTableModel.issues)
        {
            if (issue.url.getHost().equals(oldHost) && issue.url.getPort() == oldPort)
            {
                issue.setHost(newHost, newPort);
            }
        }

        try
        {
            JsonMarshaller jsonMarshaller = new JsonMarshaller();
            Collection<String> rules = jsonMarshaller.getAllRules(replicatorPanel.issueTableModel.issues);

            JSONArray macrosJson = new JSONArray();
            for (Long serial : jsonMarshaller.getAllMacros(rules))
            {
                MacrosMarshaller.Macro macro = jsonMarshaller.macrosMarshaller.getMacroBySerial(serial);
                macro.changeTarget(oldHost, oldPort, newHost, newPort);
                macrosJson.put(macro.json);
            }

            MacrosMarshaller.Macro macro = jsonMarshaller.macrosMarshaller.getMacroByName(loginMacro);
            macro.changeTarget(oldHost, oldPort, newHost, newPort);
            macrosJson.put(macro.json);

            jsonMarshaller.macrosMarshaller.setProjectMacros(macrosJson);

            JSONArray rulesJson = new JSONArray();
            for (String ruleName : rules)
            {
                SessionRulesMarshaller.Rule rule = jsonMarshaller.sessionRulesMarshaller.getRuleByName(ruleName);
                rule.changeTarget(oldHost, oldPort, newHost, newPort);
                rulesJson.put(rule.json);
            }
            jsonMarshaller.sessionRulesMarshaller.setProjectSessionRules(rulesJson);
        }
        catch(JSONException ex)
        {
            ex.printStackTrace(new PrintWriter(BurpExtender.callbacks.getStderr()));
        }

        hosts.set(e.getFirstRow(), newValue);
        if (currentIssue != null)
        {
            replicatorPanel.requestEditor.setMessage(currentIssue.request == null ? EMPTY_MESSAGE : currentIssue.request, true);
        }
        replicatorPanel.loggedIn = false;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton jButtonClearStatus;
    private javax.swing.JButton jButtonConfig;
    private javax.swing.JButton jButtonCookieJar;
    private javax.swing.JButton jButtonDelete;
    private javax.swing.JButton jButtonLoad;
    private javax.swing.JButton jButtonLogin;
    private javax.swing.JButton jButtonSave;
    private javax.swing.JButton jButtonScrub;
    private javax.swing.JButton jButtonTest;
    private javax.swing.JButton jButtonTestAll;
    private javax.swing.JButton jButtonTrace;
    private javax.swing.JButton jButtonUseExpression;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JComboBox<String> jComboBoxLoginMacro;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabelCollaborator;
    private javax.swing.JLabel jLabelCollaboratorTimeout;
    private javax.swing.JLabel jLabelFile;
    private javax.swing.JLabel jLabelGrep;
    private javax.swing.JLabel jLabelLogo;
    javax.swing.JTextArea jNotes;
    private javax.swing.JTextArea jNotes1;
    private javax.swing.JPanel jPanelIssue;
    private javax.swing.JRadioButton jRadioButtonCollaborator;
    private javax.swing.JRadioButton jRadioButtonGrep;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPaneHosts;
    private javax.swing.JTable jTableHosts;
    private javax.swing.JTextField jTextFieldCollaboratorReplace;
    private javax.swing.JTextField jTextFieldCollaboratorTimeout;
    private javax.swing.JTextField jTextFieldGrepExpression;
    private javax.swing.JTextField jTextFieldSessionRules;
    // End of variables declaration//GEN-END:variables
}
