package burp;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

/**
 *
 * @author paul
 */
public class CookieJar extends javax.swing.JDialog
{
    ReplicatorPanel replicatorPanel;
    List<ICookie> cookies;
    DefaultTableModel tableModel;
    /**
     * Creates new form CookieJar
     */
    public CookieJar(java.awt.Frame parent, ReplicatorPanel replicatorPanel) {
        super(parent, true);
        this.replicatorPanel = replicatorPanel;
        initComponents();

        SwingUtilities.invokeLater(new Runnable()
        {
            @Override
            public void run()
            {
                BurpExtender.callbacks.customizeUiComponent(CookieJar.this);
                loadCookies();
            }
        });
    }

    void loadCookies()
    {
        tableModel = (DefaultTableModel) jTable1.getModel();
        Set<String> hosts = new HashSet<>();
        for(Issue issue : replicatorPanel.issueTableModel.issues)
        {
            hosts.add(issue.url.getHost());
        }
        cookies = new ArrayList<>();
        for(ICookie cookie : BurpExtender.callbacks.getCookieJarContents())
        {
            if(hosts.contains(cookie.getDomain()))
            {
                cookies.add(cookie);
                String expiration = cookie.getExpiration() == null ? "" : cookie.getExpiration().toString();
                tableModel.addRow(new String[]{cookie.getDomain(), cookie.getPath(), cookie.getName(), cookie.getValue(), expiration});
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButtonEmpty = new javax.swing.JButton();
        jButtonClose = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Cookie jar viewer");
        setResizable(false);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Domain", "Path", "Name", "Value", "Expires"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, true, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setPreferredWidth(100);
            jTable1.getColumnModel().getColumn(1).setPreferredWidth(100);
            jTable1.getColumnModel().getColumn(2).setPreferredWidth(100);
            jTable1.getColumnModel().getColumn(3).setPreferredWidth(300);
            jTable1.getColumnModel().getColumn(4).setPreferredWidth(100);
        }

        jButtonEmpty.setText("Empty cookie jar");
        jButtonEmpty.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonEmptyActionPerformed(evt);
            }
        });

        jButtonClose.setText("Close");
        jButtonClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCloseActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 566, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButtonEmpty)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButtonClose)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButtonEmpty)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonClose)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCloseActionPerformed
        dispose();
    }//GEN-LAST:event_jButtonCloseActionPerformed

    private void jButtonEmptyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonEmptyActionPerformed
        int confirm = JOptionPane.showConfirmDialog(this, "Are you sure you want to empty the cookie jar for these hosts?", BurpExtender.name, JOptionPane.YES_NO_OPTION, JOptionPane.INFORMATION_MESSAGE);
        if(confirm == JOptionPane.NO_OPTION)
        {
            return;
        }
        replicatorPanel.loggedIn = false;
        for(ICookie cookie : cookies)
        {
            ICookie deleteCookie = new DeleteCookie(cookie.getDomain(), cookie.getName(), cookie.getPath());
            BurpExtender.callbacks.updateCookieJar(deleteCookie);
        }
        cookies = new ArrayList<>();
        while(tableModel.getRowCount() > 0)
        {
            tableModel.removeRow(0);
        }
    }//GEN-LAST:event_jButtonEmptyActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonClose;
    private javax.swing.JButton jButtonEmpty;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
