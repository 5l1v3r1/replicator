package burp;

import org.json.JSONException;
import org.json.JSONObject;
import org.json.JSONTokener;

import javax.swing.*;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.MutableTreeNode;
import javax.swing.tree.TreePath;
import java.io.PrintWriter;
import java.util.Iterator;

/**
 *
 * @author paul
 */
public class ConfigImport extends javax.swing.JDialog {
    ConfigDialog configDialog;
    JSONObject jsonBurp;

    /**
     * Creates new form ConfigImport
     */
    public ConfigImport(ConfigDialog configDialog) {
        super(configDialog, true);
        this.configDialog = configDialog;
        initComponents();
        SwingUtilities.invokeLater(new Runnable()
        {
            @Override
            public void run()
            {
                try
                {
                    String jsonString = BurpExtender.callbacks.saveConfigAsJson("");
                    jsonBurp = new JSONObject(new JSONTokener(jsonString));
                    DefaultTreeModel dtm = (DefaultTreeModel) jTree1.getModel();
                    fillTree(jsonBurp, dtm, (MutableTreeNode) dtm.getRoot(), 1);
                    dtm.reload();
                } catch (JSONException e)
                {
                    e.printStackTrace();
                }


            }
        });
    }

    void fillTree(JSONObject json, DefaultTreeModel dtm, MutableTreeNode parent, int level) throws JSONException
    {
        for(Iterator<String> iterator = json.keys(); iterator.hasNext();)
        {
            String key = iterator.next();
            MutableTreeNode node = new DefaultMutableTreeNode(key);
            dtm.insertNodeInto(node, parent, parent.getChildCount());
            if(json.get(key) instanceof JSONObject)
            {
                if(level == 1 && key.equals("project_options"))
                {
                    // Don't increment level; display tree one level deeper
                    fillTree(json.getJSONObject(key), dtm, node, level);
                }
                else if(level <= 1)
                {
                    fillTree(json.getJSONObject(key), dtm, node, level + 1);
                }
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTree1 = new javax.swing.JTree();
        jLabel1 = new javax.swing.JLabel();
        jButtonCancel = new javax.swing.JButton();
        jButtonOk = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Import Config");

        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("root");
        jTree1.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        jTree1.setRootVisible(false);
        jScrollPane1.setViewportView(jTree1);

        jLabel1.setText("Select which config to import from your current config");

        jButtonCancel.setText("Cancel");
        jButtonCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCancelActionPerformed(evt);
            }
        });

        jButtonOk.setText("Ok");
        jButtonOk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonOkActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jScrollPane1)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButtonOk)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonCancel)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 257, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonCancel)
                    .addComponent(jButtonOk))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonOkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonOkActionPerformed
        try
        {
            if(jTree1.getSelectionPaths() == null)
            {
                dispose();
                return;
            }
            JSONObject jsonReplicator = new JSONObject(new JSONTokener(configDialog.jTextArea1.getText()));

            for (TreePath path : jTree1.getSelectionPaths())
            {
                JSONObject nodeBurp = jsonBurp;

                JSONObject nodeReplicator = jsonReplicator;
                // skip root and leaf
                for (int i = 1; i < path.getPathCount() - 1; i++)
                {
                    String key = path.getPathComponent(i).toString();
                    nodeBurp = nodeBurp.getJSONObject(key);
                    if(!nodeReplicator.has(key) || !(nodeReplicator.get(key) instanceof JSONObject))
                    {
                        nodeReplicator.put(key, new JSONObject());
                    }
                    nodeReplicator = nodeReplicator.getJSONObject(key);
                }

                String key = path.getPathComponent(path.getPathCount() - 1).toString();
                nodeReplicator.put(key, nodeBurp.get(key));
            }
            configDialog.jTextArea1.setText(jsonReplicator.toString(4));
            dispose();
        }
        catch (Exception e)
        {
            BurpExtender.callbacks.printError(e.toString());
            e.printStackTrace(new PrintWriter(BurpExtender.callbacks.getStderr()));
        }
    }//GEN-LAST:event_jButtonOkActionPerformed

    private void jButtonCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCancelActionPerformed
        dispose();
    }//GEN-LAST:event_jButtonCancelActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonCancel;
    private javax.swing.JButton jButtonOk;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTree jTree1;
    // End of variables declaration//GEN-END:variables
}
